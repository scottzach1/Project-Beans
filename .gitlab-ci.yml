stages:
  - Lint
  - PlatformIO
  - Build
  - Test
  - Deploy

# https://github.com/markdownlint/markdownlint/blob/master/docs/configuration.md
# https://github.com/markdownlint/markdownlint/blob/master/docs/RULES.md
markdownlint:
  stage: Lint
  tags:
    - docker
  image: pipelinecomponents/markdownlint:latest
  script:
    - mdl --style all --warnings --rules ~MD001,~MD004,~MD005,~MD006,~MD007,~MD009,~MD012,~MD013,~MD022,~MD024,~MD025,~MD029,~MD032,~MD033,~MD034,~MD036 .
  allow_failure: true

cpplint:
  image: python:latest
  stage: Lint
  script:
    - pip install cpplint
    - cpplint --filter=-legal --exclude=*/*/.pio --recursive software_package/development
  tags:
    - docker
  allow_failure: true

test-drc:
  stage: Test
  tags:
    - drc
  image: productize/kicad-automation-scripts:latest
  script:
    - export DISPLAY=:0
    - python -m kicad-automation.pcbnew_automation.run_drc ./hardware_package/avionics_pcb/avionics_breakout_pcb/avionics_breakout_pcb.kicad_pcb .output
    - python -m kicad-automation.eeschema.schematic run_erc ./hardware_package/avionics_pcb/avionics_breakout_pcb/avionics_breakout_pcb.sch .output
  allow_failure: false

unit-test:
  stage: Test
  image: python:2.7
  script:
    - pip install -U platformio
    - cd software_package/development
    - pio test -v -e native
  tags:
    - drc
  allow_failure: true

# Unit testing job that targets one of the PIO projects with code that has no dependencies with adafruit libraries
unit-test-poc:
  stage: Test
  image: python:2.7
  script:
    - pip install -U platformio
    - cd software_package/testing/testing_environment_experiment
    - pio test -e no_adafruit_deps
  tags:
    - drc
  allow_failure: true

code-coverage:
  stage: Test
  tags:
    - docker
  image: gcc
  script:
    - apt-get update
    - apt-get install -y gcovr
    - cd software_package/code_coverage
    - chmod u+x execute_tests_coverage.sh
    - ./execute_tests_coverage.sh -f development/lib/hardware/src -f development/lib/software/src -t development/test/test_hardware -t development/test/test_software
  artifacts:
    paths:
      - software_package/code_coverage/*.html
    untracked: false
    expire_in: 10 days
  allow_failure: true
  # coverage: '/^TOTAL.*\s+(\d+\%)$/' This is commented out since we want gitlab to show code cov results only for the code-cov-poc job

# This is the code coverage proof-of-concept job that runs code coverage on one of the testing/playground directories with no adafruit dependencies
# The purpose of this is to show that the unit testing and code coverage can work without adafruit dependencies. The original code-coverage job
# is technically a functioning example, but the inability to locate the adafruit dependencies is causing issues with compiling the source code.
# This means that the test can't be executed on the code, therefore 0% code coverage. This job however targets code without any dependencies with adafruit, and
# is therefore testable, allowing for meaningful code coverage results as a POC.
code-coverage-poc:
  stage: Test
  tags:
    - docker
  image: gcc
  script:
    - apt-get update
    - apt-get install -y gcovr
    - cd software_package/code_coverage
    - chmod u+x execute_tests_coverage.sh
    - ./execute_tests_coverage.sh -f testing/testing_environment_experiment/lib/state_machine/src -t testing/testing_environment_experiment/test/test_no_adafruit_deps
  allow_failure: true
  coverage: '/^TOTAL.*\s+(\d+\%)$/'

platformio:
  image: python:2.7
  tags:
    - drc
  stage: PlatformIO
  script:
    - cd software_package/development
    - pip install -U platformio
    - pio check -v # check that `main.cpp` and any referenced libraries compile fine.
  variables: { PLATFORMIO_CI_SRC: "src/main.cpp" }
  allow_failure: true
